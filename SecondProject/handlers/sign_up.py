from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards.reply_kbs import gender_kb, look_for_kb, only_button_kb
from .menu import main_menu
from main import bot
from main import db
import states

# File includes registration handlers

router = Router()

async def ask_age(message: Message, state: FSMContext):
    """
    Asks user for his age.
    """
    await state.update_data(id=message.from_user.id)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? üôä",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(states.SigningUser.waiting_for_age)


@router.message(states.SigningUser.waiting_for_age, F.text)
async def ask_gender(message: Message, state: FSMContext):
    """
        Asks user for his gender.
    """
    age = message.text
    await state.update_data(age=age)
    if not age.isnumeric() or not (1 <= int(age) <= 100):
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ‚ùå")
        return
    await message.answer(
        "–û–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º üòè",
        reply_markup=gender_kb())
    await state.set_state(states.SigningUser.waiting_for_gender)


@router.message(states.SigningUser.waiting_for_gender)
async def ask_look_for(message: Message, state: FSMContext):
    """
        Asks user about who he is looking for.
    """
    gender = message.text
    if gender.lower() not in ["—è –ø–∞—Ä–µ–Ω—å", "—è –¥–µ–≤—É—à–∫–∞"]:
        await message.answer(
            "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòÖ",
            reply_markup=gender_kb())
        return
    if gender.lower() == "—è –ø–∞—Ä–µ–Ω—å":
        await state.update_data(gender="–ø–∞—Ä")
    else:
        await state.update_data(gender="–¥–µ–≤")
    await message.answer(
        "–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω? ü§ó",
        reply_markup=look_for_kb())
    await state.set_state(states.SigningUser.waiting_for_look_for)


@router.message(states.SigningUser.waiting_for_look_for)
async def ask_name(message: Message, state: FSMContext):
    """
        Asks user for his name.
    """
    look_for = message.text
    if look_for.lower() not in ["–ø–∞—Ä–Ω–∏", "–¥–µ–≤—É—à–∫–∏"]:
        await message.answer(
            "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòÖ",
            reply_markup=look_for_kb())
        return
    if look_for.lower() == "–ø–∞—Ä–Ω–∏":
        await state.update_data(look_for="–ø–∞—Ä")
    else:
        await state.update_data(look_for="–¥–µ–≤")
    await message.answer(
        "–ü—Ä–∏–¥—É–º–∞–π <b>username</b> –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã üëë",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(states.SigningUser.waiting_for_name)


@router.message(states.SigningUser.waiting_for_name)
async def ask_description(message: Message, state: FSMContext):
    """
        Asks user for his profile description.
    """
    name = message.text
    await state.update_data(name=name)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é ü§ì",
                         reply_markup=only_button_kb("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    await state.set_state(states.SigningUser.waiting_for_description)


@router.message(states.SigningUser.waiting_for_description, F.text)
async def ask_picture(message: Message, state: FSMContext):
    """
        Asks user for his profile picture.
    """
    description = message.text
    if description.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description="")
    else:
        await state.update_data(description=description)

    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—ë –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ü§©",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(states.SigningUser.waiting_for_photo)


@router.message(states.SigningUser.waiting_for_photo, F.photo)
async def download_photo(message: Message, state: FSMContext):
    """
        Downloads user's profile photo.
    """
    picture_id = message.photo[-1].file_id
    await state.update_data(picture_id=picture_id)
    await bot.download(
        message.photo[-1],
        destination=f"pictures/{message.photo[-1].file_id}.jpg"
    )

    user = await state.get_data()
    await db.add_user(user.get('id'), user.get('name'), user.get('age'), user.get('gender'),
                user.get('look_for'), user.get('description'), user.get('picture_id'), 0, message.from_user.username)
    print(await db.get_user(user.get('id')))

    await state.set_state(states.MainMenu.menu)

    await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ üéâ")
    await main_menu(message)

@router.message(states.SigningUser.waiting_for_photo)
async def skip_photo(message: Message):
    """
    If user's message is invalid asks him try again.
    """
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')