from functions import *
from config import *
import keyboard
import db
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
import logging
from random import choice
import asyncio

# ####
# Callbackdata codes:
# kp_ =  send film info by kinopoisk id 
# sf_ = send simmilar films by kinopoisk id
# mark_ = add to favourites list
# unmark_ = delete from favoutites 
# ####



async def check_sub(uid:int):
	user_channel_status = await bot.get_chat_member(chat_id=f'@{channel_id}', user_id=uid)
	return [True if user_channel_status['status'] != 'left' else False][0]

async def check_good(message, uid): #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –∏ –ø–æ–¥–ø–∏—Å–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
	if await check_sub(uid):
		if check_ban(uid):
			return True
		else:
			await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
			#change_state(uid, None) ?????
			return False
	else:
		await message.answer(f'‚ùå –û—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\nüçø @{channel_id} üçø\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ üîÑ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ', reply_markup=keyboard.subscribe2channel(channel_id), parse_mode='Markdown')
		change_state(uid, None)
		return False




logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s', datefmt='%d.%m %H:%M:%S')

db.create_tables()
bot = Bot(token)
dp = Dispatcher(bot)

###START
@dp.message_handler(commands='start')
async def start_message(message: types.Message):
	username = message.from_user.username
	uid = message.from_user.id
	if await check_sub(uid):
		if check_unic(uid):
			new_user(uid, username)
		if check_ban(uid):
			change_state(uid, 0)
			await message.answer('–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å‚ùï\n–î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–º–æ—Ç—Ä–∏–º\n–ñ–º–∏ –Ω–∞ /what2watch, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', reply_markup=keyboard.main_kb(), parse_mode='Markdown')
		else:
			await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
			change_state(uid, None)
	else:
		await message.answer(f'‚ùå –û—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\nüçø @{channel_id} üçø\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ üîÑ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ', reply_markup=keyboard.subscribe2channel(channel_id), parse_mode='Markdown')
		change_state(uid, None)


@dp.message_handler(commands='what2watch')
async def what2watch(message: types.Message):
	if await check_good( message,message.from_user.id):
		kp_id = get_interesting_film()
		title, kp_id, poster, rating, year, length, desc, countries, genres = getcinemainfo(kp_id)
		country = ', '.join(countries)
		genre = ', '.join(genres)
		await message.answer(f'''üé¨ {title} [|]({poster}) {year}\n\n‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n‚ñ´Ô∏è –ñ–∞–Ω—Ä: {genre}\n‚ñ´Ô∏è –°—Ç—Ä–∞–Ω–∞: {country}\n‚ñ´Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.\n\n‚ñ´Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n\n[üé• –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å]({player}{kp_id})''', parse_mode='Markdown', reply_markup=keyboard.film_profile(kp_id, title, message.from_user.id))

###ADMIN
@dp.message_handler(commands='admin')
async def admin_panel(message: types.Message):
	if message.from_user.id == admin_id:
		await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=keyboard.admin_kb())




# States:
#
#-4 - distribution
#-3 - to unban user
#-2 - to ban user
#-1 - send message by userid
# 0 - main menu
# 1 - choose type of searching
# 2 - find film by title
# 3 - find film by kinopoisk code
# 4 - communication with the administrator


@dp.message_handler(content_types = ['text'])
async def send_text(message: types.Message):
	text = message.text
	uid = message.from_user.id
	state = get_state(uid)
	if await check_good(message,uid):
		if text == "üí´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
			await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', reply_markup=keyboard.main_kb())
			change_state(uid,0)

		elif state == 1:
			if text == 'üîπ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é':
				await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=keyboard.finding())
				change_state(uid, 2)
			elif text == 'üîπ –ü–æ –∫–æ–¥—É Kinopoisk':
				await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', reply_markup=keyboard.finding())
				change_state(uid, 3)

		elif state == 2:
			await message.answer('–ü–æ–∏—Å–∫...')
			cinema_list = getcinemalist(text.lower().capitalize())
			print(*cinema_list)
			if len(cinema_list)==0:
				await message.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫', reply_markup = keyboard.finding())
			else:
				await message.answer('–£—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', reply_markup=keyboard.choose_film_inkb(cinema_list))
		
		elif state == 3:
			try:
				kp_id = int(text)
				await message.answer('–ü–æ–∏—Å–∫...')
				try:
					title, kp_id, poster, rating, year, length, desc, countries, genres = getcinemainfo(kp_id)
					country = ', '.join(countries)
					genre = ', '.join(genres)
					await message.answer(f'''üé¨ {title} [|]({poster}) {year}\n\n‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n‚ñ´Ô∏è –ñ–∞–Ω—Ä: {genre}\n‚ñ´Ô∏è –°—Ç—Ä–∞–Ω–∞: {country}\n‚ñ´Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.\n\n‚ñ´Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n\n[üé• –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å]({player}{kp_id})''', parse_mode='Markdown', reply_markup=keyboard.film_profile(kp_id, title, uid))
				except:
					await message.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω–æ')
			except:
				await message.reply('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')


		elif state == 4:
			await bot.send_message(communication_channel, f'{text}\nuser_id = {uid}\nusername = @{message.from_user.username}')
			change_state(uid,0)
			await message.answer('–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_markup = keyboard.main_kb())
		
		elif state == -1 and uid == admin_id:
			try:
				index = text.index('/')
				await bot.send_message(int(text[:index]), text[index+1:])
				await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup = keyboard.main_kb())
				change_state(uid, 0)
			except:
				await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ user_id/message')

		elif state == -2 and uid == admin_id:
			try:
				ban_id = int(text)
				ban_user(ban_id)
				await message.answer(f'–ü–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å  —Å user_id - {ban_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', reply_markup = keyboard.main_kb())
				change_state(uid, 0)
			except:
				await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∏–∫–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π user_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

		elif state == -3 and uid == admin_id:
			try:
				unban_id = int(text)
				unban_user(unban_id)
				await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c user_id - {unban_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.', reply_markup=keyboard.main_kb())
				change_state(uid, 0)
			except:
				await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∏–∫–æ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π user_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
		
		elif state == -4 and uid == admin_id:
			try:
				for i in get_all_users_id():
					try:
						await bot.send_message(i, text)
					except:
						bot.send_message(communication_channel, f'–°–æ–æ–±–∑–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id - {i} –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
				await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: \n{text}\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard.main_kb())
				change_state(uid, 0)
			except:
				await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
				change_state(uid, 0)

		elif text == "üïµ‚Äç‚ôÇÔ∏è–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º":
			await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞: ', reply_markup=keyboard.find_film())
			change_state(uid, 1)

		elif text == 'üßê–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
			kp_id = get_interesting_film()
			title, kp_id, poster, rating, year, length, desc, countries, genres = getcinemainfo(kp_id)
			country = ', '.join(countries)
			genre = ', '.join(genres)
			await message.answer(f'''üé¨ {title} [|]({poster}) {year}\n\n‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n‚ñ´Ô∏è –ñ–∞–Ω—Ä: {genre}\n‚ñ´Ô∏è –°—Ç—Ä–∞–Ω–∞: {country}\n‚ñ´Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.\n\n‚ñ´Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n\n[üé• –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å]({player}{kp_id})''', parse_mode='Markdown', reply_markup=keyboard.film_profile(kp_id, title, uid))

		elif text == '‚ùî–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π':
			await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup = keyboard.finding())
			change_state(uid, 4)

		elif text == '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
			try:
				cinema_list = [i.split('\\') for i in get_mark_list(uid)]
				while [''] in cinema_list:
					cinema_list.remove([''])
				await message.answer(f'–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å {len(cinema_list)}/25 –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω.\n–í–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã:', reply_markup=keyboard.choose_film_inkb(cinema_list))
			except:
				await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ª—é–±–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤ üòÆ')

@dp.callback_query_handler(lambda c: c.data[:4] == 'adm_')
async def admin_panel(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	data = callback_query.data
	if callback_query.from_user.id == admin_id: 
		if data == 'adm_sendmes':		
			await bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: user_id/message', reply_markup = keyboard.finding())
			change_state(admin_id, -1)
		elif data == 'adm_ban':
			await bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å', reply_markup = keyboard.finding())
			change_state(admin_id, -2)
		elif data == 'adm_unban':
			await bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å', reply_markup = keyboard.finding())
			change_state(admin_id, -3)	
		elif data == 'adm_userscount':
			await bot.send_message(admin_id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {count_users()}', reply_markup = keyboard.main_kb())
		elif data == 'adm_base':
			await bot.send_document(admin_id, open('bot.db', 'rb'))
		elif data == 'adm_distrib':
			await bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=keyboard.finding())
			change_state(admin_id, -4)


@dp.callback_query_handler(lambda c: c.data[:3]=='kp_')
async def film_profile(callback_query: types.CallbackQuery):
	if await check_sub(callback_query.from_user.id):
		if check_ban(callback_query.from_user.id):
			await bot.answer_callback_query(callback_query.id)
			kp_id = callback_query.data
			title, kp_id, poster, rating, year, length, desc, countries, genres = getcinemainfo(kp_id[3:])
			country = ', '.join(countries)
			genre = ', '.join(genres)
			await bot.send_message(callback_query.from_user.id, f'''üé¨ {title} [|]({poster}) {year}\n\n‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n‚ñ´Ô∏è –ñ–∞–Ω—Ä: {genre}\n‚ñ´Ô∏è –°—Ç—Ä–∞–Ω–∞: {country}\n‚ñ´Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.\n\n‚ñ´Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n\n[üé• –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å]({player}{kp_id})''', parse_mode='Markdown', reply_markup=keyboard.film_profile(kp_id, title, callback_query.from_user.id))
		else:
			await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
	else:
		await message.answer(f'‚ùå –û—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\nüçø @{channel_id} üçø\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ üîÑ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ', reply_markup=keyboard.subscribe2channel(channel_id), parse_mode='Markdown')
		change_state(callback_query.from_user.id, None)


###Similar
@dp.callback_query_handler(lambda c: c.data[:3]=='sf_')
async def similar_films(callback_query: types.CallbackQuery):
	if await check_sub(callback_query.from_user.id):
		if check_ban(callback_query.from_user.id):
			await bot.answer_callback_query(callback_query.id)
			kp_id = callback_query.data
			kp_id = kp_id[3:]
			similar_list = get_similar_films(kp_id)
			title, kp_id, poster, rating, year, length, desc, countries, genres = getcinemainfo(choice(similar_list))
			country = ', '.join(countries)
			genre = ', '.join(genres)
			await bot.send_message(callback_query.from_user.id, f'''üé¨ {title} [|]({poster}) {year}\n\n‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥: {rating}\n‚ñ´Ô∏è –ñ–∞–Ω—Ä: {genre}\n‚ñ´Ô∏è –°—Ç—Ä–∞–Ω–∞: {country}\n‚ñ´Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length} –º–∏–Ω.\n\n‚ñ´Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}\n\n\n[üé• –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å]({player}{kp_id})''', parse_mode='Markdown', reply_markup=keyboard.film_profile(kp_id, title, callback_query.from_user.id))
		else:
			await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
	else:
		await message.answer(f'‚ùå –û—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\nüçø @{channel_id} üçø\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ üîÑ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ', reply_markup=keyboard.subscribe2channel(channel_id), parse_mode='Markdown')
		change_state(callback_query.from_user.id, None)

@dp.callback_query_handler(lambda c: c.data == 'check_sub')
async def check_sub_callback(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if await check_sub(callback_query.from_user.id):
		await bot.send_message(callback_query.from_user.id, '‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω', reply_markup = keyboard.main_kb())
	else:
		await bot.send_message(callback_query.from_user.id, f'‚ú¥ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{channel_id} - –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å ‚ò∫', reply_markup = keyboard.main_kb())


@dp.callback_query_handler(lambda c: c.data[:5] == 'mark_')
async def add_to_mark(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if await check_sub(callback_query.from_user.id):
		if check_ban(callback_query.from_user.id):	
			if len(get_mark_list(callback_query.from_user.id)) <26:
				try:
					add2mark(callback_query.from_user.id, callback_query.data[5:])
					await bot.send_message(callback_query.from_user.id, '–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
				except:
					await bot.send_message(callback_query.from_user.id, '–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
			else:
				await bot.send_message(callback_query.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º')
	else:
		await message.answer(f'‚ùå –û—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\nüçø @{channel_id} üçø\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ üîÑ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ', reply_markup=keyboard.subscribe2channel(channel_id), parse_mode='Markdown')
		change_state(callback_query.from_user.id, None)


@dp.callback_query_handler(lambda c: c.data[:7] == 'unmark_')
async def add_to_mark(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if await check_sub(callback_query.from_user.id):
		if check_ban(callback_query.from_user.id):	
			try:
				delfrommark(callback_query.from_user.id, callback_query.data[7:])
				await bot.send_message(callback_query.from_user.id, '–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö')
			except:
				await bot.send_message(callback_query.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö') 
		else:
			await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=types.ReplyKeyboardRemove())
	else:
		await message.answer(f'‚ùå –û—à–∏–±–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª\nüçø @{channel_id} üçø\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ üîÑ *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ', reply_markup=keyboard.subscribe2channel(channel_id), parse_mode='Markdown')
		change_state(callback_query.from_user.id, None)




# ###Autoposting
# async def post_random_film(channel_id:int):
# 	await asyncio.sleep(TIMEOUT)








if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)